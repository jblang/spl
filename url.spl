PROGRAM ReadURL;

{	Version history
	- 12-Jun-2010, P. Schorn, initial version
}

PROCEDURE BDOS(WORD function, input);	EXTERNAL;
PROCEDURE INPORT(WORD port);		EXTERNAL;
PROCEDURE OUTPOR(WORD port, data);	EXTERNAL;
PROCEDURE STPSUB;			EXTERNAL;
PROCEDURE HALT;				EXTERNAL;

CONST	commandLineAddress		= 80h;
	defaultFCBAddress		= 5ch;
	FCBLength			= 36; { allow random access }
	printCharCmd			= 2h;
	printStringCmd			= 9h;
	versionNumberCmd		= 0ch;
	readConsoleStringCmd		= 0Ah;
	closeFileCmd			= 10h;
	deleteFileCmd			= 13h;
	writeSequentialCmd		= 15h;
	makeFileCmd			= 16h;
	setDMAAdressCmd			= 1ah;
	cr				= 13;
	lf				= 10;
	crlf				= cr + 256 * lf;
	eof				= 1ah;
	SIMHPort			= 0feh;
	getVersionSIMHCmd		= 6;
	resetSIMHInterfaceCmd		= 14;
	readURLCmd			= 30;
	cpmError			= 255;
	recordSize			= 128;
	noError				= 0;
	directoryFullError		= 1;
	diskFullError			= 2;
	false				= 0;
	true				= 1;

BYTE 	commandLine	AT commandLineAddress;
	usage		= ('Usage: URL <file name>', crlf,
	'Asks for a URL which is read and written into <file name>.',	crlf,
	'Characters in the URL which are between "!" are transformed',	crlf,
	'to lower case, i.e. Zx!AB!yZ will become ZxabyZ.',		crlf,
	'This is useful when invoking URL from a SUBMIT file.',		crlf,
	'$':[1]);
	fileHasBeenCreated, fileNeedsToBeClosed;

BYTE[FCBLength]	defaultFCB AT defaultFCBAddress;
BYTE[2 * recordSize + 1]	buffer = (
	crlf, crlf, 'For SIMH. Copyright 2010 by Peter Schorn,',
	' peter.schorn@acm.org', crlf, crlf, eof:[1]);
BYTE	done			= ('kB written.', crlf, '$':[1]);
	signon			= (crlf,'URL V-1.00 (12-Jun-10)',
					' SIMH Interface V');
	SIMHVersion		= ('XXX', crlf, '$':[1]);
	wrongVersion		= ('Need SIMH Interface V004 or above ',
				   'for URL read support.', crlf, '$':[1]);
	originalFileDeleted	= ('Previous file of same name deleted.',
					crlf, '$':[1]);
	noDirectorySpace	= ('No more directory space available.',
					crlf, '$':[1]);
	internalError		= ('Could not create directory entry.',
					crlf, '$':[1]);
	diskFull		= ('Disk full.', crlf, '$':[1]);
	URLPrompt		= (crlf, 'URL = ', '$':[1]);
	simhrequired		= ('SIMH required.');
	{ must be followed by crlfString }
	crlfString		= (crlf, '$':[1]);
	size0 = (        '$':[1], 0:[4]);
	{ all sizeX entries use the same number of bytes }
	size1 = ('.125', '$':[1]);
	size2 = ('.25',  '$':[1], 0:[1]);
	size3 = ('.375', '$':[1]);
	size4 = ('.5',   '$':[1], 0:[2]);
	size5 = ('.625', '$':[1]);
	size6 = ('.75',  '$':[1], 0:[1]);
	size7 = ('.875', '$':[1]);
WORD	byteCount, recordCount, lowerCaseToggle, ch;

PROCEDURE printString(WORD stringp);
	BEGIN
	BDOS(printStringCmd, stringp)
	END printString;

PROCEDURE printChar(WORD char);
	BEGIN
	BDOS(printCharCmd, char:[1])
	END printChar;

PROCEDURE printUnsignedInt(WORD int);
	BEGIN
	IF	int << 10
	THEN	printChar(int + '0')
	ELSE	printUnsignedInt(int DIV 10);
		printChar(int MOD 10 + '0')
	ENDIF
	END printUnsignedInt;

PROCEDURE closeFile;
	BEGIN
	IF	(fileNeedsToBeClosed <> false) AND
		(BDOS(closeFileCmd, @defaultFCB) AND 0FFH = cpmError)
	THEN	printString(@internalError);
		STPSUB;
		HALT
	ENDIF
	END closeFile;

PROCEDURE inport;
	BEGIN
	RETURN INPORT(SIMHPort)
	END inport;

PROCEDURE flushInputAndHalt;
	BEGIN
	WHILE inport >> 0 DO
		inport
	ENDWHILE;
	STPSUB;
	HALT
	END flushInputAndHalt;

PROCEDURE writeBuffer;
	BEGIN
	recordCount := recordCount + 1;
	IF	fileHasBeenCreated = false
	THEN	fileHasBeenCreated := true;
		IF	BDOS(deleteFileCmd, @defaultFCB) AND 0FFH <> cpmError
		THEN	printString(@originalFileDeleted)
		ENDIF;
		IF	BDOS(makeFileCmd, @defaultFCB) AND 0FFH = cpmError
		THEN	printString(@noDirectorySpace);
			flushInputAndHalt
		ENDIF;
		fileNeedsToBeClosed := true;
		BDOS(setDMAAdressCmd, @buffer)
	ENDIF;
	IF	BDOS(writeSequentialCmd, @defaultFCB) AND 0FFH <> 0
	THEN	printString(@diskFull);
		closeFile;
		flushInputAndHalt
	ENDIF
	END writeBuffer;

BEGIN { ReadURL }
byteCount := 128;
WHILE byteCount >> 0 DO
	OUTPOR(SIMHPort, resetSIMHInterfaceCmd);
	byteCount := byteCount - 1
ENDWHILE;

OUTPOR(SIMHPort, getVersionSIMHCmd);
buffer[0]:[2] := inport + 256 * inport;
buffer[2]:[2] := inport + 256 * inport;
IF	buffer:[4] = simhrequired:[4]
	{ obtain three characters of version }
THEN	SIMHVersion[0]:[2] := inport + 256 * inport;
	SIMHVersion[2]:[1] := inport;
	REPEAT
	UNTIL	inport = 0;
	IF	SIMHVersion[2]:[1] << '4'
	THEN	printString(@wrongVersion);
		EXIT
	ENDIF;
ELSE	printString(@simhrequired);
	STPSUB;
	EXIT	{ no SIMH, terminate program }
ENDIF;
printString(@signon);

IF	commandLine[0]:[1] = 0
THEN	printString(@usage);
	STPSUB;
	EXIT
ENDIF;

REPEAT
	buffer[0]:[1] := 2 * recordSize - 1;
	printString(@URLPrompt);
	BDOS(readConsoleStringCmd, @buffer);
UNTIL buffer[1]:[1] >> 0;

lowerCaseToggle := 0;
printString(@URLPrompt);
byteCount := 2;
OUTPOR(SIMHPort, readURLCmd);
REPEAT
	ch := buffer[byteCount]:[1];
	IF	ch = '!'
	THEN	lowerCaseToggle := 1 - lowerCaseToggle
	ELSE	IF	(lowerCaseToggle >> 0) AND ('A' <<= ch) AND (ch <<= 'Z')
		THEN	ch := ch + ('a' - 'A')
		ENDIF;
		OUTPOR(SIMHPort, ch);
		printChar(ch)
	ENDIF;
	byteCount := byteCount + 1;
	buffer[1]:[1] := buffer[1]:[1] - 1
UNTIL buffer[1]:[1] = 0;
printString(@crlfString);
OUTPOR(SIMHPort, 0);

recordCount		:= 0;
byteCount		:= 0;
fileHasBeenCreated	:= false;
fileNeedsToBeClosed	:= false;

WHILE inport >> 0 DO
	buffer[byteCount]:[1] := inport;
	byteCount := byteCount + 1;
	IF	byteCount = recordSize
	THEN	byteCount := 0;
		writeBuffer
	ENDIF
ENDWHILE;

IF	byteCount >> 0
THEN	WHILE byteCount << recordSize DO
		buffer[byteCount]:[1] := eof;
		byteCount := byteCount + 1
	ENDWHILE;
	writeBuffer
ENDIF;

printUnsignedInt(recordCount DIV 8);
printString(@size0 + (@size1 - @size0) * (recordCount MOD 8));
printString(@done);
closeFile

END ReadURL.
